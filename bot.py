from config import TOKEN
import logging
from aiogram import Bot, Dispatcher, executor, types
import but
from testtt import *
from model import *
from torchvision import transforms

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

G_XtoY = CycleGenerator(conv_dim=3, n_res_blocks=6)                                 # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ –ª–µ—Ç–∞ –≤ –∑–∏–º—É
G_XtoY.load_state_dict(torch.load("G_XtoY.pkl"), True)
G_YtoX = CycleGenerator(conv_dim=3, n_res_blocks=6)                                 # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ –∑–∏–º—ã –≤ –ª–µ—Ç–æ
G_YtoX.load_state_dict(torch.load("G_YtoX.pkl"), True)

size = 256
transforms_ = [transforms.Resize(size, Image.BICUBIC),
               transforms.ToTensor(),
               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]

trs = transforms.Compose(transforms_)


def transformS2W(root):
    global trs
    im = get_img(root)
    im = scale(im)
    im = im.cpu()
    output = G_XtoY(im)
    tensor_save_bgrimage(output.data[0], 'outW.jpg', False)


def transformW2S(root):
    global trs
    im = get_img(root)
    im = scale(im)
    im = im.cpu()
    output = G_YtoX(im)
    tensor_save_bgrimage(output.data[0], 'outS.jpg', False)


@dp.message_handler(commands=['Winter'])
async def process_help(message: types.Message):
    await bot.send_message(message.from_user.id, '–°–∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ–≥–æ-–Ω–∏–±—É–¥—å –ª–µ—Ç–Ω–µ–≥–æ, –∏ –∑–¥–µ–ª–∞—é –∏–∑ –Ω–µ–µ –∑–∏–º—É ‚ùÑ')

    @dp.message_handler(content_types=['photo'])
    async def process_help1(message: types.Message):
        await message.photo[-1].download('Winter.jpg')

        await message.answer(text='–ó–Ω–∞—á–∏—Ç –∑–∏–º–∞... –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è —Å–º–æ–≥—É —Å —ç—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å...')
        transformS2W('Winter.jpg')
        with open('outW.jpg', 'rb') as file:
            await message.answer_photo(file, caption='–í–∂—É—Ö!')


@dp.message_handler(commands=['Summer'])
async def process_help(message: types.Message):
    await bot.send_message(message.from_user.id, '–°–∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ–≥–æ–Ω–∏–±—É–¥—å –∑–∏–º–Ω–µ–≥–æ, –∏ —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–µ –ª–µ—Ç–æ üîÜ')

    @dp.message_handler(content_types=['photo'])
    async def process_help2(message: types.Message):
        await message.photo[-1].download('Summer.jpg')
        await message.answer(text='–ó–Ω–∞—á–∏—Ç –ª–µ—Ç–æ... –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è —Å–º–æ–≥—É —Å —ç—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å...')
        transformW2S('Summer.jpg')
        with open('outS.jpg', 'rb') as file:
            await message.answer_photo(file, caption='–í–∂—É—Ö!')


@dp.message_handler(commands=['start'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, —ç—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç '
                                                 '—Ç–≤–æ–∏ –∑–∏–º–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ª–µ—Ç–∏–Ω–∏–µ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –∫–∞–∫ —Å–æ—á—Ç–µ—à—å –Ω—É–∂–Ω—ã–º.'
                                                 '–í—ã–±–µ—Ä–∏ /Winter –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –∑–∏–º—É –ª–∏–±–æ /Summer –µ—Å–ª–∏ –ª–µ—Ç–æ. ',
                           reply_markup=but.markup2)


@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_UNK(message: types.Message):
    text = message.text
    if text:
        await message.reply(text='–í–æ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ —Å–µ–π—á–∞—Å –±—ã–ª–æ, –¥–∞–≤–∞–π –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é')


@dp.message_handler(commands=['Help'])
async def process_help(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Å —á–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å, –≤—Å–µ –∂–µ –ø—Ä–æ—Å—Ç–æ.'
                                                 '–ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ /start —á—Ç–æ–±—ã –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)



